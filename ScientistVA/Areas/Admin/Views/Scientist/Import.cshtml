@using System.Data;
@using BELibrary.Entity
@using BELibrary.Utils
@model List<Scientist>
@{ ViewBag.Title = "Import Scientists";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml"; }

@section CSS{
    <!--DataTables [ OPTIONAL ]-->
    <link href="/Areas/Admin/Content/plugins/datatables/media/css/dataTables.bootstrap.css" rel="stylesheet">
    <link href="/Areas/Admin/Content/plugins/datatables/extensions/Responsive/css/responsive.dataTables.min.css" rel="stylesheet">
    <style type="text/css">
        /* Generic Styling, for Desktops/Laptops */
        table {
            width: 100%;
            border-collapse: collapse;
        }
        /* Zebra striping */
        tr:nth-of-type(odd) {
            background: #eee;
        }

        th {
            background: #333;
            color: white;
            font-weight: bold;
        }

        td, th {
            padding: 6px;
            border: 1px solid #ccc;
            text-align: left;
        }
        /*
        Max width before this PARTICULAR table gets nasty
        This query will take effect for any screen smaller than 760px
        and also iPads specifically.
        */
        @@media only screen and (max-width: 760px), (min-device-width: 768px) and (max-device-width: 1024px) {
            /* Force table to not be like tables anymore */
            table, thead, tbody, th, td, tr {
                display: block;
            }
                /* Hide table headers (but not display: none;, for accessibility) */
                thead tr {
                    position: absolute;
                    top: -9999px;
                    left: -9999px;
                }

            tr {
                border: 1px solid #ccc;
            }

            td {
                /* Behave  like a "row" */
                border: none;
                border-bottom: 1px solid #eee;
                position: relative;
                padding-left: 50%;
            }

                td:before {
                    /* Now like a table header */
                    position: absolute;
                    /* Top/left values mimic padding */
                    top: 6px;
                    left: 6px;
                    width: 45%;
                    padding-right: 10px;
                    white-space: nowrap;
                }
                /*
         Label the data
         */
                td:before {
                    content: attr(data-title);
                }
        }
    </style>
}
<!--Dropzone [ OPTIONAL ]-->
<link href="plugins/dropzone/dropzone.min.css" rel="stylesheet">
<!--List-->
<div class="panel">
    <div class="panel-heading">
        <h2 class="panel-title">Import Scientist list from excel file</h2>
    </div>
    <div class="panel-body">
        <div class="bord-top pad-ver">
            @using (Html.BeginForm("ImportEx", "Scientist", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
<input type="file" name="file" />
                <input type="submit" value="Import" style="margin-top:10px" class="btn btn-success fileinput-button dz-clickable" />}
        </div>
        <div>
            <table id="">
                @if (ViewBag.Data != null)
                {
    <thead>
        @foreach (DataColumn column in (ViewBag.Data as System.Data.DataTable).Columns)
        {
<th>@column.ColumnName.ToUpper()</th>
}
        </thead> if ((ViewBag.Data as System.Data.DataTable).Rows.Count > 0)
        {
            int n = (ViewBag.Data as System.Data.DataTable).Rows.Count > 10 ? 10 : (ViewBag.Data as System.Data.DataTable).Rows.Count;
            for (int i = 0; i < n; i++)
            {
                DataRow dr = (ViewBag.Data as System.Data.DataTable).Rows[i];
<tr>
    @foreach (DataColumn column in (ViewBag.Data as System.Data.DataTable).Columns)
    {
<td data-title='@column.ColumnName'>

    @dr[column].ToString()
</td>
}
</tr>
 }
}
else
{
int count = (ViewBag.Data as System.Data.DataTable).Columns.Count;
<tr>
    <td colspan='@count' style="color:red;">
        No Data Found.
    </td>
</tr>
 }
}
else
{
if (ViewBag.Error != null)
{
<tr>
    <td style="color:red;">
        @(ViewBag.Error != null ? ViewBag.Error.ToString() : "")
    </td>
</tr>
}
}
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <!--DataTables [ OPTIONAL ]-->
    <script src="/Areas/Admin/Content/plugins/datatables/media/js/jquery.dataTables.js"></script>
    <script src="/Areas/Admin/Content/plugins/datatables/media/js/dataTables.bootstrap.js"></script>
    <script src="/Areas/Admin/Content/plugins/datatables/extensions/Responsive/js/dataTables.responsive.min.js"></script>
    <!--Form File Upload [ SAMPLE ]-->
    <script src="js/demo/form-file-upload.js"></script>

    <!--Dropzone [ OPTIONAL ]-->
    <script src="plugins/dropzone/dropzone.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#tblData').dataTable({
                "responsive": false,
                "language": {
                    "paginate": {
                        "previous": '<i class="demo-psi-arrow-left"></i>',
                        "next": '<i class="demo-psi-arrow-right"></i>'
                    }
                }
            });
        });

        const baseUrl = "/admin/scientist";
        //Edit
        function openEditing(id) {
            window.location.href = `${baseUrl}/update?id=${id}`;
        }

        //Del
        function deleteElement(_id, name) {
            var mess = 'Confirm <b>delete</b> this record <b>' + name + '</b>';
            bootbox.confirm(mess, function (result) {
                if (result) {
                    ajax.del(`${baseUrl}/del`, { id: _id },
                        (response) => {
                            if (response.status) {
                                notify.push(response.mess, notify.EType.SUCCESS);
                                $(`#row_${_id}`).remove();
                            } else {
                                notify.push(mess, notify.EType.DANGER);
                            }
                        },
                        (jqXHR, textStatus) => {
                            const mess = `Request failed: ${textStatus}`;
                            notify.push(mess, notify.EType.DANGER);

                        }
                    )
                }
            });
        }
    </script>
}